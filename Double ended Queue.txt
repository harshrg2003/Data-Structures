#include<stdio.h>

#define MAX 20

void insert_front(int Q[MAX],int *front,int *rear,int elem)

{

  if((*front==0)&&(*rear==-1))

  {

    (*rear)++;

    Q[*rear]=elem;

    return;

  }

  else if(*front!=0)

  {

     (*front)--;

     Q[*front]=elem;

  }

  else

  {

    printf("Insertion not possible\n");

  }

}

void insert_rear(int Q[MAX],int *front,int *rear,int elem)

{

  if(*rear==MAX-1)

  {

    printf("Insertion not possible\n");

    return;

  }

  (*rear)++;

  Q[*rear]=elem;

}

void delete_front(int Q[MAX],int *front,int *rear)

{

  if(*front>*rear)

  {

    printf("Deletion not possible\n");

    return;

  }

  int elem=Q[*front];

  printf("Deleted element is %d\n",elem);

  (*front)++;

}

void delete_rear(int Q[MAX],int *front,int *rear)

{

   if(*front>*rear)

   {

     printf("Deletion not possible\n");

     return;

   }

   if(*front==*rear)

   {

      int elem=Q[*rear];

      printf("%d deleted\n",elem);

      *front=0;

      *rear=-1;

      return;

   }

   int elem=Q[*rear];

   printf("%d deleted\n",elem);

   (*rear)--;

}

void display(int Q[MAX],int front,int rear)

{

   if(front>rear)

   {

      printf("NO elements\n");

      return;

   }

   int i;

   printf("Elements of the Queue are\n");

   for(i=front;i<=rear;i++)

   {

      printf("%d\n",Q[i]);

   }

}

int main()

{

    int Q[MAX],front=0,rear=-1,elem,ch;

    while(1)

    {

       printf("Enter 1.Insert front,\n2.Insert rear,\n3.Delete front,\n4.Delete rear\n,5.Display\n");

       printf("Enter your choice\n");

       scanf("%d",&ch);

       switch(ch)

       {

          case 1:printf("Enter the element\n");

                 scanf("%d",&elem);

                 insert_front(Q,&front,&rear,elem);

                 break;

          case 2:printf("Enter the element\n");

                 scanf("%d",&elem);

                 insert_rear(Q,&front,&rear,elem);

                 break;

         case 3:delete_front(Q,&front,&rear);

                break;

         case 4:delete_rear(Q,&front,&rear);

                break;

         case 5:display(Q,front,rear);

                break;

         default:return 0;

       }

    }

    return 0;

}                                                                               